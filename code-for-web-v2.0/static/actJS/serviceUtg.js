var utg = {
"nodes": [{'layoutcode': '<root />', 'app': 'a2dp.Vol_133', 'label': 'service', 'shape': 'image', 'actcode': 'public class service extends Service implements OnAudioFocusChangeListener {\n    private static final String A2DP_Vol = "A2DP_Vol";\n    private static final int ALARM_STREAM = 2;\n    static String DeviceToConnect = null;\n    private static final String FIX_STREAM = "fix_stream";\n    private static final int IN_CALL_STREAM = 1;\n    private static final String LOG_TAG = "A2DP_Volume";\n    private static final int MUSIC_STREAM = 0;\n    private static final String OLD_PH_VOL = "old_phone_vol";\n    private static final String OLD_VOLUME = "old_vol";\n    private static Integer OldVol = Integer.valueOf(5);\n    private static Integer OldVol2 = Integer.valueOf(5);\n    private static Integer Oldsilent = null;\n    public static final String PREFS_NAME = "btVol";\n    static AudioManager am2 = ((AudioManager) null);\n    private static MyApplication application;\n    public static btDevice[] btdConn = new btDevice[5];\n    public static Integer connects = Integer.valueOf(0);\n    private static boolean hideVolUi = false;\n    static IBluetoothA2dp ibta2;\n    public static ServiceConnection mConnection = new ServiceConnection() {\n        public void onServiceConnected(ComponentName name, IBinder service) {\n            service.mIsBound = true;\n            service.ibta2 = Stub.asInterface(service);\n            BluetoothDevice device = null;\n            for (BluetoothDevice dev : BluetoothAdapter.getDefaultAdapter().getBondedDevices()) {\n                if (dev.getAddress().equalsIgnoreCase(service.DeviceToConnect)) {\n                    device = dev;\n                }\n            }\n            if (device != null) {\n                try {\n                    service.ibta2.connect(device);\n                } catch (RemoteException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n        public void onServiceDisconnected(ComponentName name) {\n            service.mIsBound = false;\n            service.doUnbind(service.application);\n        }\n    };\n    static boolean mIsBound = false;\n    public static boolean mTtsReady = false;\n    private static boolean mvolsLeft = false;\n    private static String notify_pref = "always";\n    private static boolean pvolsLeft = false;\n    private static boolean ramp_vol = false;\n    public static boolean run = false;\n    public static boolean talk = false;\n    private DeviceDB DB;\n    float MAX_ACC = 10.0f;\n    private int MAX_MESSAGE_LENGTH = 350;\n    long MAX_TIME = 20000;\n    private long SMS_delay = 3000;\n    private final BroadcastReceiver SMScatcher = new BroadcastReceiver() {\n        public void onReceive(Context context, Intent intent) {\n            if (intent.getAction().equals("android.provider.Telephony.SMS_RECEIVED") && service.this.tm.getCallState() == 0) {\n                Bundle bundle = intent.getExtras();\n                if (bundle != null) {\n                    Object[] pdusObj = (Object[]) bundle.get("pdus");\n                    SmsMessage[] messages = new SmsMessage[pdusObj.length];\n                    for (int i = 0; i &lt; pdusObj.length; i++) {\n                        messages[i] = SmsMessage.createFromPdu((byte[]) pdusObj[i]);\n                    }\n                    StringBuilder sb = new StringBuilder();\n                    for (SmsMessage currentMessage : messages) {\n                        sb.append(MessageFormat.format(service.this.getString(R.string.msgTemplate), new Object[]{service.this.GetName(currentMessage.getDisplayOriginatingAddress()), currentMessage.getDisplayMessageBody()})).append(\' \');\n                    }\n                    service.this.TextReader(sb.toString().trim());\n                }\n            }\n        }\n    };\n    private int SMSstream = 0;\n    String a2dpDir = "";\n    private boolean bluetoothWasOff = false;\n    private final BroadcastReceiver btOFFReciever = new BroadcastReceiver() {\n        public void onReceive(Context context, Intent intent) {\n            BluetoothAdapter mBTA = BluetoothAdapter.getDefaultAdapter();\n            String mac = "";\n            if (mBTA.getState() == 10 || mBTA.getState() == 13) {\n                int j = 0;\n                while (j &lt; service.btdConn.length) {\n                    if (service.btdConn[j] != null && service.btdConn[j].getMac().length() &gt; 2) {\n                        mac = service.btdConn[j].getMac();\n                        service.btdConn[j] = null;\n                    }\n                    j++;\n                }\n                service.this.getConnects();\n                if (mac != "") {\n                    if (service.this.notify) {\n                        service.this.updateNot(false, null);\n                    }\n                    if (!service.mvolsLeft) {\n                        service.setVolume(service.OldVol2.intValue(), service.application);\n                    }\n                    if (!service.pvolsLeft) {\n                        service.setPVolume(service.OldVol.intValue());\n                    }\n                    service.this.dowifi(service.this.oldwifistate);\n                }\n                if (service.mTtsReady) {\n                    try {\n                        if (!service.this.clearedTts) {\n                            service.this.clearTts();\n                        }\n                        service.this.mTts.shutdown();\n                        service.mTtsReady = false;\n                        service.this.unregisterReceiver(service.this.SMScatcher);\n                    } catch (Exception e) {\n                        e.printStackTrace();\n                    }\n                }\n                Intent itent = new Intent();\n                itent.setAction("a2dp.Vol.main.RELOAD_LIST");\n                itent.putExtra("disconnect\\', 'image': '/static/activity/a2dp.Vol.service.png', 'id': 'a2dp.Vol.service'}],
"edges": []
}